/// This scenario exists to explain the complete set of configurable
/// parameters for a scenario used by CRTS. Where applicable, the
/// default values are used.

// general scenario parameters: defines how many nodes are involved
// in the scenario and how long the scenario will be executed in seconds.
num_nodes = 2;
run_time = 20.0;

// scenario controller:
// - The SC specifies which scenario controller will be used by the CRTS_controller
//   process. There should be a corresponding class defined in ./scenario_controllers/
// - A scenario controller can be triggered by a timeout which is specified in 
//   milliseconds by sc_timeout_ms.
// - sc_args is a string that can be used to pass arbitrary arguments
//   to the scenario controller. It is converted to argc, argv format and
//   passed to the constructor of the custom scenario controller. There, it can 
//   be processed using, e.g. getopt().  
scenario_controller = "SC_Template";
sc_timeout_ms = 10.0;
sc_args = "-d 1"; // sets to debug level 1

// Node 1
node1 : {
  // general node parameters:
  // - Each node is either a cognitive radio or an interferer which is
  //   specified by type = "cognitive radio" or "interferer".
  // - Each cognitive radio can either use the Extensible Cognitive
  //   Radio class provided with CRTS or launch a python process. This
  //   is specified by cognitive_radio_type = "ecr" or "python".
  // - The server_ip parameter specifies which physical node corresponds
  //   to this node definition.
  node_type = "cognitive radio";
  cognitive_radio_type = "ecr";
  server_ip = "192.168.1.47";

  // network parameters:
  // - Each cognitive radio node uses a virtual network interface to
  //   connect generated network traffic to the cognitive radio process.
  //   crts_ip specifies the IP address assigned to this interface.
  // - Right now network traffic is generated for a single destination
  //   which is specified by the target_ip parameter. There ought to be
  //   another node with the corresponding IP.
  // - The network traffic is generated according to the net_traffic_type
  //   parameter which can be "stream", "burst", or "poisson".
  // - The rate at which network traffic is generated is specified by
  //   net_mean_throughput which is specified in bits/second;
  // - If the network traffic type is "burst", the number of packets per
  //   burst is specified as net_burst_length.
  crts_ip = "10.0.0.2";
  target_ip = "10.0.0.3";
  net_traffic_type = "stream";
  net_mean_throughput = 2e6;
  net_burst_length = 1;

  log_net_rx = 1;
  log_net_tx = 1;
  generate_octave_logs = 1;

  //===================================================================
  // Parameters specific to nodes using the ECR and interferer nodes
  //===================================================================

  // initial USRP transmitter settings:
  // The tx frequency is specified in Hz and the gain is in dB. The rate
  // specifies the baseband sampling rate of the RF streams to the USRP.
  tx_freq = 857.5e6;
  tx_rate = 2e6;
  tx_gain = 10.0;

  // log/report settings:
  // - Interferer nodes and nodes using the ECR will log all parameters
  //   of their transmissions when this flag is set. These logs will be
  //   converted to octave scripts if the generate_octave_logs parameter
  //   is set.
  log_phy_tx = 1;

  //===================================================================
  // Parameters specific to nodes using the ECR
  //===================================================================

  // cognitive engine parameters:
  // - The cognitive_engine specifies which cognitive engine will be used by the ECR.
  //   There should be a corresponding class defined in ./cognitive_engines/
  // - A cognitive engine used by the ECR can be triggered by several events
  //   one of which is a timeout and is specified in milliseconds by
  //   ce_timeout_ms.
  // - ce_args is a string that can be used to pass arbitrary, node-specific information
  //   to the cognitive engine. It is converted to argc, argv format and
  //   passed to the constructor of the custom cognitive engine. There, it can 
  //   be processed using, e.g. getopt().
    
  cognitive_engine = "CE_Template";
  ce_timeout_ms = 200.0;
  ce_args = "-d 1";

  // log/report settings:
  // - The ECR will print performance metrics for every frame it receives
  //   if print_rx_frame_metrics = 1.
  // - The ECR will keep binary logs of all physical layer receive and/or
  //   transmit parameters and metrics based on the log_phy_rx and
  //   log_phy_tx settings. Octave logs will be generated based on the
  //   generate_octave_logs setting above.
  print_rx_frame_metrics = 0;
  log_phy_rx = 1;

  // initial USRP receive settings:
  // The rx frequency is specified in Hz and the gain is in dB. The rate
  // specifies the baseband sampling rates of the RF stream from the USRP.
  rx_freq = 862.5e6;
  rx_rate = 2e6;
  rx_gain = 10.0;

  // initial liquid OFDM settings:
  // - The tx_gain_soft specifies a gain in dB which is applied to the
  //   waveform after modulation but before transmission. The generated
  //   signal will have unit power and since OFDM typically has a peak to
  //   average power ratio of ~12 dB, this setting is typically -12. By
  //   increasing this value you can increase the average power of your
  //   signal, but suffer from distortion due to clipping.
  // - The tx_modulation specifies the initial modulation scheme used.
  //   The string used must belong to the set specified by liquid-dsp
  //   which can be found in ./src/modem/src/modem_utilities.c
  //   of the liquid-dsp github repository.
  // - The tx_crc specifies the type of cyclic redundancy check used
  //   to validate each frame payload. The string must belong to the
  //   set found in ./src/fec/src/crc.c of the liquid-dsp github
  //   repository.
  // - The tx_fec0 and tx_fec1 specify inner and outter forward error
  //   correction schemes respectively and should use the strings found
  //   in ./src/fec/src/fec.c of the liquid-dsp github repository.
  // - The tx_cp_len and rx_cp_len define the number of samples used for
  //   the cyclic prefix added by the liquid-dsp OFDM frame generator.
  // - The tx_taper_len and rx_taper_len specify how many samples of
  //   the cyclic prefix are windowed (to improve spectral properties).
  tx_gain_soft = -12.0;
  tx_modulation = "bpsk";
  tx_crc = "crc32";
  tx_fec0 = "v27";
  tx_fec1 = "none";
  tx_cp_len = 16;
  tx_taper_len = 4;
  rx_cp_len = 16;
  rx_taper_len = 4;

  // initial subcarrier allocation:
  // The transmit and receive subcarrier allocations can be specified
  // in three ways; using the default liquid-dsp allocation, using a
  // standard allocation method, and using a completely custom allocation
  // - The tx_subcarriers and rx_subcarriers specifies the total number of
  //   subcarriers used including all data, null, and pilot subcarriers.
  // - The tx_subcarrier_alloc_method and rx_subcarrier_alloc_method will
  //   select which of the above mentioned methods are used; possible
  //   values are "default", "standard", and "custom".
  // - If the standard allocation method is used, the tx_guard_subcarriers
  //   and rx_guard_subcarriers specifies how many of the outter subcarriers
  //   are nulls (on each side).
  // - If the standard allocation method is used, the tx_central_null and
  //   rx_central_nulls settings specify how many total nulls are placed in
  //   the center of the spectrum.
  // - If the standard allocation method is used, the tx_pilot_freq and
  //   rx_pilot_freq specifies how often a subcarrier is designed as a pilot.
  //   One out of every X non-null subcarriers will be a pilot.
  // - If the custom allocation method is used, the tx_subcarrier_alloc and
  //   rx_subcarrier_aloc structs will be used to define the allocation
  //   Subcarriers are specified sequentially by type and number. The type
  //   can be "data", "pilot", or "null". The number can be ommitted if 1.
  tx_subcarriers = 32;
  tx_subcarrier_alloc_method = "default";
  tx_guard_subcarriers = 4;
  tx_central_nulls = 6;
  tx_pilot_freq = 4;
  tx_subcarrier_alloc : {
    sc_type_1 = "null";
    sc_num_1 = 4;
  }

  rx_subcarriers = 32;
  rx_subcarrier_alloc_method = "default";
  rx_guard_subcarriers = 4;
  rx_central_nulls = 6;
  rx_pilot_freq = 4;
  rx_subcarrier_alloc : {
    sc_type_1 = "null";
    sc_num_1 = 4;
  }

  //===================================================================
  // Parameters specific to interferer nodes
  //===================================================================

  // interference parameters:
  // - The interference_type specifies what waveform is transmitted and
  //   can be "cw" (continuous-wave), "gmsk" (Gaussian minimum shift keying),
  //   "rrc" (root-raised cosine), "ofdm" (orthogonal frequency division
  //   multiplexing), or "noise" which is just randomly generated noise.
  // - The period and duty cycle parameters determine a pattern of transmission
  //   for the interferer. Period is in second, and duty cycle is a fraction
  //   between 0.0 and 1.0.
  // - The tx_freq_behavior specifies any frequency dynamic behavior the
  //   interferer may have. The options are "fixed", "sweep", or "random".
  // - The tx_freq_min and tx_freq_max specify the min and max center
  //   frequencies used by the interferer when employing a sweeping or
  //   random frequency behavior.
  // - The tx_freq_dwell_time specifies how long the interferer will remain
  //   at a given frequency in seconds.
  // - The tx_freq_resolution specifies the granularity of the center
  //   frequencies used by the interferer in Hz when employing a sweeping
  //   or random frequency behavior.
  interference_type = "cw";
  period = 1.0;
  duty_cycle = 1.0;
  tx_freq_behavior = "fixed";
  tx_freq_min = 760e6;
  tx_freq_max = 770e6;
  tx_freq_dwell_time = 1.0;
  tx_freq_resolution = 1e6;
};
